# @package _global_
defaults:
  - /experiment/projects/bridging/dinosaur/_base_feature_recon
  - /dataset: coco
  - /experiment/projects/bridging/dinosaur/_preprocessing_coco_dino_feature_recon_ccrop
  - /experiment/projects/bridging/dinosaur/_metrics_coco
  - optional /vq: vq
  - _self_

# The following parameters assume training on 8 GPUs, leading to an effective batch size of 64.
logger:
  _target_: pytorch_lightning.loggers.WandbLogger
  notes: null
  tags: null
  offline: false
  group: ${hydra:runtime.choices.dataset}
  project: ocl-pool

visualizations:
  pool_indices:
    _target_: routed.ocl.visualizations.IndexHistogram
    pool_size: ${models.perceptual_grouping.pool.codebook_size}
    indices_path: perceptual_grouping.pool_indices
  pre_attn:
    _target_: routed.ocl.visualizations.ResizedMask
    target_size: 92
    patch_mode: true
    mask_path: perceptual_grouping.pre_attn
  post_attn:
    _target_: routed.ocl.visualizations.ResizedMask
    target_size: 92
    patch_mode: true
    mask_path: perceptual_grouping.post_attn

training_metrics:
  perplexity:
    _target_: routed.ocl.metrics.pool.Perplexity
    pool_size: ${models.perceptual_grouping.pool.codebook_size}
    base: 2
    indices_path: perceptual_grouping.pool_indices
  unique_ratio:
    _target_: routed.ocl.metrics.UniqueRatio
    slot_num: ${models.conditioning.n_slots}
    indices_path: perceptual_grouping.pool_indices
  pool_usage:
    _target_: routed.ocl.metrics.CodebookUsage
    pool_size: ${models.perceptual_grouping.pool.codebook_size}
    indices_path: perceptual_grouping.pool_indices
  norm_feat:
    _target_: routed.ocl.metrics.TensorNormStatistic
    dim: -1
    tensor_path: perceptual_grouping.pos_feat
  norm_k_inputs:
    _target_: routed.ocl.metrics.TensorNormStatistic
    dim: -1
    tensor_path: perceptual_grouping.k_inputs
  norm_enc_feat:
    _target_: routed.ocl.metrics.TensorNormStatistic
    dim: -1
    tensor_path: object_decoder.target
  ln_w_var:
    _target_: routed.ocl.metrics.TensorStatistic
    tensor_path: perceptual_grouping.ln_w
    reduction: var
  ln_w_mean:
    _target_: routed.ocl.metrics.TensorStatistic
    tensor_path: perceptual_grouping.ln_w
    reduction: mean
  ln_b_var:
    _target_: routed.ocl.metrics.TensorStatistic
    tensor_path: perceptual_grouping.ln_b
    reduction: var
  ln_b_mean:
    _target_: routed.ocl.metrics.TensorStatistic
    tensor_path: perceptual_grouping.ln_b
    reduction: mean

training_vis_frequency: 10000

trainer:
  devices: 1
  max_steps: 500000
  max_epochs:
  check_val_every_n_epoch: null
  val_check_interval: 5000

dataset:
  num_workers: 4
  batch_size: 64

experiment:
  input_feature_dim: 768


models:
  conditioning:
    _target_: routed.ocl.conditioning.RandomConditioning
    n_slots: 7
    object_dim: 256
    batch_size_path: input.batch_size
  feature_extractor:
    model_name: vit_base_patch16_224_dino
    pretrained: ${when_testing:false,true}
    freeze: true
  perceptual_grouping:
    _target_: routed.ocl.perceptual_grouping.SlotAttentionGroupingHyper
    feat_num: 196
    num_blocks: 1
    hypernet:
      _target_: ocl.hypernet.Hypernet
      slot_dim: ${models.conditioning.object_dim}
      feat_dim: ${..feature_dim}
      down_proj_dim: 8
      use_ada: true
  object_decoder:
    _target_: routed.ocl.decoding.PatchDecoder
    decoder:
      _target_: ocl.neural_networks.build_mlp
      _partial_: true
      features: [2048, 2048, 2048]
    object_features_path: perceptual_grouping.objects
  
losses:
  commit:
    _target_: routed.ocl.losses.ScalarWrapperLoss
    weight: 1.0
    loss_path: perceptual_grouping.commit_loss
